from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView, TemplateView
from django.urls import reverse_lazy
from django.core.paginator import Paginator
from django.contrib.auth.models import Group, Permission
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import UserPassesTestMixin, PermissionRequiredMixin
from django.contrib.contenttypes.models import ContentType
from django.contrib import messages

from .models import Post, Author, Category, Subscription
from .filters import PostFilter
from .forms import PostForm
from .mixins import AuthRequiredMixin


class PermissionRequiredMixinWithMessage(PermissionRequiredMixin):
    permission_denied_message = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."

    def handle_no_permission(self):
        messages.error(self.request, self.permission_denied_message)
        return redirect('news_list')


class AuthorRequiredMixin(UserPassesTestMixin):
    permission_denied_message = "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç."

    def test_func(self):
        return self.request.user.groups.filter(name='authors').exists()

    def handle_no_permission(self):
        messages.error(self.request, self.permission_denied_message)
        return redirect('news_list')


# üÜï –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (–° –û–¢–õ–ê–î–ö–û–ô)
@login_required
def subscribe_to_category(request, category_id):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    print(f"üîî –ó–ê–ü–†–û–° –ù–ê –ü–û–î–ü–ò–°–ö–£: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={request.user.username}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è_id={category_id}")

    category = get_object_or_404(Category, id=category_id)
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    existing_subscription = Subscription.objects.filter(
        user=request.user,
        category=category
    ).exists()
    print(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_subscription}")

    subscription, created = Subscription.objects.get_or_create(
        user=request.user,
        category=category
    )

    if created:
        print(f"‚úÖ –°–û–ó–î–ê–ù–ê –ù–û–í–ê–Ø –ü–û–î–ü–ò–°–ö–ê: {request.user.username} -> {category.name}")
        messages.success(request, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category.name}"!')
    else:
        print(f"‚ÑπÔ∏è –ü–û–î–ü–ò–°–ö–ê –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢: {request.user.username} -> {category.name}")
        messages.info(request, f'‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category.name}"')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subscriptions_count = Subscription.objects.filter(user=request.user).count()
    print(f"üìà –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_subscriptions_count}")

    return redirect('category_posts', category_id=category_id)


@login_required
def unsubscribe_from_category(request, category_id):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(f"üîî –ó–ê–ü–†–û–° –ù–ê –û–¢–ü–ò–°–ö–£: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={request.user.username}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è_id={category_id}")

    category = get_object_or_404(Category, id=category_id)
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    subscription_exists = Subscription.objects.filter(
        user=request.user,
        category=category
    ).exists()
    print(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {subscription_exists}")

    deleted_count = Subscription.objects.filter(
        user=request.user,
        category=category
    ).delete()[0]

    if deleted_count > 0:
        print(f"‚ùå –ü–û–î–ü–ò–°–ö–ê –£–î–ê–õ–ï–ù–ê: {request.user.username} -> {category.name}")
        messages.success(request, f'‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}"')
    else:
        print(f"‚ö†Ô∏è –ü–û–î–ü–ò–°–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê: {request.user.username} -> {category.name}")
        messages.warning(request, f'‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category.name}"')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    user_subscriptions_count = Subscription.objects.filter(user=request.user).count()
    print(f"üìà –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏: {user_subscriptions_count}")

    return redirect('category_posts', category_id=category_id)


@login_required
def my_subscriptions(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîî –ó–ê–ü–†–û–° –ú–û–ò –ü–û–î–ü–ò–°–ö–ò: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={request.user.username}")

    subscriptions = Subscription.objects.filter(user=request.user).select_related('category')
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {subscriptions.count()}")

    for sub in subscriptions:
        print(f"   - {sub.category.name} (–ø–æ–¥–ø–∏—Å–∫–∞ —Å {sub.subscribed_at})")

    context = {
        'subscriptions': subscriptions,
        'categories': Category.objects.all()
    }
    return render(request, 'news/my_subscriptions.html', context)


def category_posts(request, category_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ—Å—Ç–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    print(
        f"üîî –ó–ê–ü–†–û–° –ö–ê–¢–ï–ì–û–†–ò–Ø: –∫–∞—Ç–µ–≥–æ—Ä–∏—è_id={category_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={request.user.username if request.user.is_authenticated else '–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}")

    category = get_object_or_404(Category, id=category_id)
    print(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")

    posts = Post.objects.filter(categories=category).order_by('-created_at')
    print(f"üìÑ –ü–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {posts.count()}")

    paginator = Paginator(posts, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    is_subscribed = False
    if request.user.is_authenticated:
        is_subscribed = Subscription.objects.filter(
            user=request.user,
            category=category
        ).exists()
        print(f"üë§ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {is_subscribed}")
    else:
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

    context = {
        'category': category,
        'page_obj': page_obj,
        'is_subscribed': is_subscribed,
        'categories': Category.objects.all()
    }
    return render(request, 'news/category_posts.html', context)


# üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ—Ä—ã
@login_required
def become_author(request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É authors"""
    print(f"üîî –ó–ê–ü–†–û–° –°–¢–ê–¢–¨ –ê–í–¢–û–†–û–ú: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={request.user.username}")

    authors_group, created = Group.objects.get_or_create(name='authors')
    print(f"üìã –ì—Ä—É–ø–ø–∞ authors: {'—Å–æ–∑–¥–∞–Ω–∞' if created else '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")

    content_type = ContentType.objects.get_for_model(Post)
    post_permissions = Permission.objects.filter(content_type=content_type)
    print(f"üîê –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ Post: {post_permissions.count()}")

    authors_group.permissions.set(post_permissions)
    print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≥—Ä—É–ø–ø–µ authors")

    if not request.user.groups.filter(name='authors').exists():
        request.user.groups.add(authors_group)
        print(f"üéâ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù –í –ê–í–¢–û–†–´: {request.user.username}")
        messages.success(request, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –∞–≤—Ç–æ—Ä –∏ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—å–∏.')
    else:
        print(f"‚ÑπÔ∏è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –ê–í–¢–û–†: {request.user.username}")
        messages.info(request, '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º.')

    return redirect('news_list')


# üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–õ–ê–°–°–´-–ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò
class NewsList(ListView):
    model = Post
    template_name = 'news/news_list.html'
    context_object_name = 'news_list'
    paginate_by = 10

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.NEWS).order_by('-created_at')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        print(
            f"üì∞ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {context['news_list'].count()} –Ω–æ–≤–æ—Å—Ç–µ–π, {context['categories'].count()} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return context


class NewsDetail(DetailView):
    model = Post
    template_name = 'news/news_detail.html'
    context_object_name = 'news'

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.NEWS)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.request.user.is_authenticated:
            post_categories = self.object.categories.all()
            user_subscriptions = Subscription.objects.filter(
                user=self.request.user,
                category__in=post_categories
            ).values_list('category_id', flat=True)
            context['user_subscribed_categories'] = list(user_subscriptions)
            print(f"üìñ –î–µ—Ç–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏: '{self.object.title}', –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(user_subscriptions)}")
        return context


class NewsSearch(ListView):
    model = Post
    template_name = 'news/news_search.html'
    context_object_name = 'news_list'
    paginate_by = 10

    def get_queryset(self):
        queryset = Post.objects.filter(post_type=Post.NEWS).order_by('-created_at')
        self.filterset = PostFilter(self.request.GET, queryset=queryset)
        return self.filterset.qs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['filterset'] = self.filterset
        context['categories'] = Category.objects.all()
        print(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: –Ω–∞–π–¥–µ–Ω–æ {context['news_list'].count()} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return context


# üÜï –û–ë–ù–û–í–õ–ï–ù–ù–´–ï CRUD –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø
class NewsCreate(PermissionRequiredMixinWithMessage, AuthRequiredMixin, CreateView):
    form_class = PostForm
    model = Post
    template_name = 'news/news_edit.html'
    permission_required = 'news.add_post'

    def form_valid(self, form):
        post = form.save(commit=False)
        post.post_type = Post.NEWS
        author, created = Author.objects.get_or_create(user=self.request.user)
        post.author = author
        response = super().form_valid(form)

        # üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        print(f"üìù –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ID: {self.object.pk}")
        self.object.send_notifications_to_subscribers()

        return response

    def get_success_url(self):
        messages.success(self.request, '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.')
        return reverse_lazy('news_detail', kwargs={'pk': self.object.pk})


class NewsUpdate(PermissionRequiredMixinWithMessage, AuthRequiredMixin, UpdateView):
    form_class = PostForm
    model = Post
    template_name = 'news/news_edit.html'
    permission_required = 'news.change_post'

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.NEWS)

    def get_success_url(self):
        return reverse_lazy('news_detail', kwargs={'pk': self.object.pk})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        return context


class NewsDelete(PermissionRequiredMixinWithMessage, AuthRequiredMixin, DeleteView):
    model = Post
    template_name = 'news/news_delete.html'
    success_url = reverse_lazy('news_list')
    permission_required = 'news.delete_post'

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.NEWS)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        return context


class ArticleCreate(PermissionRequiredMixinWithMessage, AuthRequiredMixin, CreateView):
    form_class = PostForm
    model = Post
    template_name = 'news/article_edit.html'
    permission_required = 'news.add_post'

    def form_valid(self, form):
        post = form.save(commit=False)
        post.post_type = Post.ARTICLE
        author, created = Author.objects.get_or_create(user=self.request.user)
        post.author = author
        response = super().form_valid(form)

        # üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        print(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ID: {self.object.pk}")
        self.object.send_notifications_to_subscribers()

        return response

    def get_success_url(self):
        messages.success(self.request, '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.')
        return reverse_lazy('news_detail', kwargs={'pk': self.object.pk})


class ArticleUpdate(PermissionRequiredMixinWithMessage, AuthRequiredMixin, UpdateView):
    form_class = PostForm
    model = Post
    template_name = 'news/article_edit.html'
    permission_required = 'news.change_post'

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.ARTICLE)

    def get_success_url(self):
        return reverse_lazy('news_detail', kwargs={'pk': self.object.pk})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        return context


class ArticleDelete(PermissionRequiredMixinWithMessage, AuthRequiredMixin, DeleteView):
    model = Post
    template_name = 'news/article_delete.html'
    success_url = reverse_lazy('news_list')
    permission_required = 'news.delete_post'

    def get_queryset(self):
        return Post.objects.filter(post_type=Post.ARTICLE)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.all()
        return context


class ActivationView(TemplateView):
    template_name = 'accounts/activation.html'

    def get(self, request, token, *args, **kwargs):
        context = self.get_context_data(**kwargs)

        try:
            activation_token = ActivationToken.objects.get(token=token)

            if activation_token.is_expired():
                context['status'] = 'expired'
                context['message'] = '–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é.'
            elif activation_token.activated:
                context['status'] = 'already_activated'
                context['message'] = '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.'
            else:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                activation_token.activated = True
                activation_token.save()

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = activation_token.user
                user.is_active = True
                user.save()

                context['status'] = 'success'
                context['message'] = '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
                context['username'] = user.username

        except ActivationToken.DoesNotExist:
            context['status'] = 'invalid'
            context['message'] = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.'

        return self.render_to_response(context)


@login_required
def resend_activation_email(request):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    try:
        activation_token = ActivationToken.objects.get(user=request.user)

        if activation_token.activated:
            messages.info(request, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
        elif activation_token.is_expired():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            activation_token.delete()
            new_token = ActivationToken.create_token(request.user)
            activation_url = f"{settings.SITE_URL}/accounts/activate/{new_token.token}/"
            EmailService.send_welcome_email(request.user, activation_url)
            messages.success(request, '–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.')
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
            activation_url = f"{settings.SITE_URL}/accounts/activate/{activation_token.token}/"
            EmailService.send_welcome_email(request.user, activation_url)
            messages.success(request, '–ü–∏—Å—å–º–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.')

    except ActivationToken.DoesNotExist:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –µ–≥–æ –Ω–µ—Ç
        new_token = ActivationToken.create_token(request.user)
        activation_url = f"{settings.SITE_URL}/accounts/activate/{new_token.token}/"
        EmailService.send_welcome_email(request.user, activation_url)
        messages.success(request, '–ü–∏—Å—å–º–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.')

    return redirect('profile')  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞