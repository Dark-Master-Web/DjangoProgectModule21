from django.db import models
from django.contrib.auth.models import User
from django.utils.crypto import get_random_string
from django.utils import timezone
from datetime import timedelta, datetime
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.core.exceptions import ValidationError


class Author(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    rating = models.IntegerField(default=0)

    def update_rating(self):
        """–†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –µ–≥–æ –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        # –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞
        post_rating = sum(post.rating for post in self.post_set.all())

        # –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ—Ä–∞
        comment_rating = sum(comment.rating for comment in Comment.objects.filter(user=self.user))

        # –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∞–≤—Ç–æ—Ä–∞
        comments_to_posts_rating = sum(
            comment.rating for post in self.post_set.all()
            for comment in post.comment_set.all()
        )

        self.rating = post_rating * 3 + comment_rating + comments_to_posts_rating
        self.save()

    def get_news_count_today(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–º —Å–µ–≥–æ–¥–Ω—è"""
        today_start = timezone.make_aware(datetime.combine(timezone.now().date(), datetime.min.time()))
        return self.post_set.filter(
            post_type=Post.NEWS,
            created_at__gte=today_start
        ).count()

    def can_publish_news(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∞–≤—Ç–æ—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—â–µ –Ω–æ–≤–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è"""
        return self.get_news_count_today() < 3

    def __str__(self):
        return self.user.username


class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)
    subscribers = models.ManyToManyField(
        User,
        through='Subscription',
        related_name='subscribed_categories',
        blank=True
    )

    def get_subscribers_count(self):
        return self.subscribers.count()

    def __str__(self):
        return self.name


class Subscription(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    subscribed_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'category']  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫

    def __str__(self):
        return f"{self.user.username} - {self.category.name}"


class Post(models.Model):
    ARTICLE = 'AR'
    NEWS = 'NW'
    POST_TYPES = [
        (ARTICLE, '–°—Ç–∞—Ç—å—è'),
        (NEWS, '–ù–æ–≤–æ—Å—Ç—å'),
    ]

    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    post_type = models.CharField(max_length=2, choices=POST_TYPES, default=ARTICLE)
    categories = models.ManyToManyField(Category, through='PostCategory')
    title = models.CharField(max_length=255)
    content = models.TextField()
    rating = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞

    def clean(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞"""
        if self.post_type == self.NEWS and self.pk is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            if not self.author.can_publish_news():
                news_count = self.author.get_news_count_today()
                raise ValidationError(
                    f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 3 –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å—É—Ç–∫–∏. '
                    f'–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π.'
                )

    def save(self, *args, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.clean()
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    def preview(self):
        return self.content[:124] + '...' if len(self.content) > 124 else self.content

    def like(self):
        self.rating += 1
        self.save()

    def dislike(self):
        self.rating -= 1
        self.save()

    def send_notifications_to_subscribers(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç–∞"""
        if self.post_type != self.NEWS:
            return  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π

        categories = self.categories.all()
        for category in categories:
            subscribers = category.subscribers.all()
            for subscriber in subscribers:
                self._send_single_notification(subscriber, category)

    def _send_single_notification(self, subscriber, category):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É"""
        try:
            subject = f'üì∞ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}"'

            context = {
                'username': subscriber.username,
                'post_title': self.title,
                'post_preview': self.preview(),
                'category_name': category.name,
                'post_url': f"{settings.SITE_URL}/news/{self.id}/",
                'author_name': self.author.user.username,
                'post_date': self.created_at.strftime('%d.%m.%Y –≤ %H:%M'),
                'unsubscribe_url': f"{settings.SITE_URL}/news/category/{category.id}/unsubscribe/",
            }

            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            message = render_to_string('news/email_notification.txt', context)

            # HTML –≤–µ—Ä—Å–∏—è
            html_message = render_to_string('news/email_notification.html', context)

            send_mail(
                subject=subject,
                message=message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[subscriber.email],
                html_message=html_message,
                fail_silently=False,
            )
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {subscriber.email}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {subscriber.email}: {e}")


class PostCategory(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)

    class Meta:
        verbose_name_plural = "Post Categories"

    def __str__(self):
        return f"{self.post.title} - {self.category.name}"


class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    rating = models.IntegerField(default=0)

    class Meta:
        ordering = ['-created_at']

    def like(self):
        self.rating += 1
        self.save()

    def dislike(self):
        self.rating -= 1
        self.save()

    def __str__(self):
        return f"Comment by {self.user.username} on {self.post.title}"


class ActivationToken(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    token = models.CharField(max_length=64, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    activated = models.BooleanField(default=False)

    def is_expired(self):
        expiration_days = 7  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
        return timezone.now() > self.created_at + timedelta(days=expiration_days)

    def is_valid(self):
        return not self.activated and not self.is_expired()

    @classmethod
    def create_token(cls, user):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        token = get_random_string(64)
        return cls.objects.create(user=user, token=token)

    def __str__(self):
        status = 'Activated' if self.activated else 'Expired' if self.is_expired() else 'Pending'
        return f"Token for {self.user.username} - {status}"