from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin
from .models import Author, Category, Post, Comment, Subscription, ActivationToken, PostCategory


@admin.register(Author)
class AuthorAdmin(admin.ModelAdmin):
    list_display = ['user', 'rating']
    search_fields = ['user__username', 'user__email']


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'subscribers_count']
    search_fields = ['name']

    def subscribers_count(self, obj):
        return obj.subscribers.count()

    subscribers_count.short_description = '–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'


@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    list_display = ['user', 'category', 'subscribed_at']
    list_filter = ['category', 'subscribed_at']
    search_fields = ['user__username', 'category__name']
    date_hierarchy = 'subscribed_at'


class PostCategoryInline(admin.TabularInline):
    model = PostCategory
    extra = 1


@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'post_type', 'author', 'created_at', 'rating', 'categories_list']
    list_filter = ['post_type', 'created_at', 'categories']
    search_fields = ['title', 'content']
    inlines = [PostCategoryInline]
    readonly_fields = ['created_at']
    actions = ['send_notifications_action']

    def categories_list(self, obj):
        return ", ".join([category.name for category in obj.categories.all()])

    categories_list.short_description = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'

    def save_model(self, request, obj, form, change):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
        """
        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ: {obj.title}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change}")
        super().save_model(request, obj, form, change)

        # üÜï –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if not change:
            print(f"üéØ –ù–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
            self._schedule_notification_check(obj)

    def _schedule_notification_check(self, post):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        import threading
        import time

        def check_categories_and_notify():
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–≤—è–∑–∏ ManyToMany —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
            time.sleep(2)

            try:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                refreshed_post = Post.objects.get(pk=post.pk)
                categories = refreshed_post.categories.all()

                print(f"üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ '{refreshed_post.title}': {categories.count()} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

                if categories:
                    print(f"üöÄ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                    refreshed_post.send_notifications_to_subscribers()
                else:
                    print("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=check_categories_and_notify)
        thread.daemon = True
        thread.start()

    def send_notifications_action(self, request, queryset):
        """
        –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        for post in queryset:
            print(f"üìß –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞: {post.title}")
            categories = post.categories.all()

            if categories:
                try:
                    post.send_notifications_to_subscribers()
                    self.message_user(request, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è '{post.title}'")
                except Exception as e:
                    self.message_user(request, f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è '{post.title}': {e}", level='ERROR')
            else:
                self.message_user(request, f"‚ö†Ô∏è –£ –ø–æ—Å—Ç–∞ '{post.title}' –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", level='WARNING')

    send_notifications_action.short_description = "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ['user', 'post', 'created_at', 'rating']
    list_filter = ['created_at']
    search_fields = ['user__username', 'post__title', 'text']


# üÜï Inline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class SubscriptionInline(admin.TabularInline):
    model = Subscription
    extra = 1
    verbose_name = '–ü–æ–¥–ø–∏—Å–∫–∞'
    verbose_name_plural = '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'


# üÜï Inline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CategorySubscriptionInline(admin.TabularInline):
    model = Subscription
    extra = 1
    verbose_name = '–ü–æ–¥–ø–∏—Å—á–∏–∫'
    verbose_name_plural = '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'


# –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–¥–º–∏–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CustomCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'subscribers_count']
    search_fields = ['name']
    inlines = [CategorySubscriptionInline]

    def subscribers_count(self, obj):
        return obj.subscribers.count()

    subscribers_count.short_description = '–ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'


# –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class CustomUserAdmin(UserAdmin):
    inlines = [SubscriptionInline]


# –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∫–∞–º–∏
admin.site.unregister(Category)
admin.site.register(Category, CustomCategoryAdmin)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# admin.site.unregister(User)
# admin.site.register(User, CustomUserAdmin)

@admin.register(ActivationToken)
class ActivationTokenAdmin(admin.ModelAdmin):
    list_display = ['user', 'token', 'created_at', 'activated', 'is_expired']
    list_filter = ['activated', 'created_at']
    search_fields = ['user__username', 'token']
    readonly_fields = ['created_at']

    def is_expired(self, obj):
        return obj.is_expired()

    is_expired.boolean = True
    is_expired.short_description = '–ò—Å—Ç–µ–∫'