from django.db.models.signals import m2m_changed, post_save, post_delete
from django.dispatch import receiver
from django.contrib.auth.models import User, Group
from django.db import transaction
from django.conf import settings
from django.core.cache import cache
from django.utils import timezone
from allauth.account.signals import user_signed_up
from allauth.socialaccount.signals import social_account_added

from .models import Post, Author, ActivationToken, Category, Subscription
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger('news.signals')


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@receiver(user_signed_up)
def handle_user_signed_up(sender, request, user, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ django-allauth
    """
    logger.info(f"üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ allauth: {user.email}")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É common
        common_group, created = Group.objects.get_or_create(name='common')
        user.groups.add(common_group)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞
        author, author_created = Author.objects.get_or_create(user=user)

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        from .services.email_service import EmailService
        activation_token = ActivationToken.create_token(user)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        activation_url = f"{settings.SITE_URL}/accounts/activate/{activation_token.token}/"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        EmailService.send_welcome_email(user, activation_url)

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. Author —Å–æ–∑–¥–∞–Ω: {author_created}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")


@receiver(social_account_added)
def handle_social_signup(sender, request, sociallogin, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    """
    user = sociallogin.user
    logger.info(f"üåê –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.email} —á–µ—Ä–µ–∑ {sociallogin.account.provider}")

    # –î–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
    activation_token, created = ActivationToken.objects.get_or_create(user=user)
    activation_token.activated = True
    activation_token.save()


@receiver(post_save, sender=User)
def handle_user_post_save(sender, instance, created, **kwargs):
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ allauth –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
    """
    if created and not instance.is_staff:
        logger.info(f"üÜï –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {instance.username}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not instance.groups.filter(name='common').exists():
            common_group, created = Group.objects.get_or_create(name='common')
            instance.groups.add(common_group)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞
            Author.objects.get_or_create(user=instance)


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ê–í–¢–û–†–û–í
@receiver(post_save, sender=User)
def create_author_profile(sender, instance, created, **kwargs):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if created and not hasattr(instance, 'author'):
        Author.objects.create(user=instance)
        logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞ –¥–ª—è: {instance.username}")


@receiver(post_delete, sender=Author)
def cleanup_user_group(sender, instance, **kwargs):
    """
    –û—á–∏—Å—Ç–∫–∞ –≥—Ä—É–ø–ø –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞
    """
    try:
        instance.user.groups.filter(name='authors').delete()
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ—Ä–∞ –¥–ª—è: {instance.user.username}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä—É–ø–ø: {e}")


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ü–û–°–¢–û–í –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
@receiver(m2m_changed, sender=Post.categories.through)
def handle_post_categories_changed(sender, instance, action, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø–æ—Å—Ç–∞
    """
    logger.debug(f"üéØ –°–∏–≥–Ω–∞–ª M2M: action={action}, –ø–æ—Å—Ç='{instance.title}'")

    if action == "post_add" and instance.post_type == Post.NEWS:
        logger.info(f"üöÄ –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –Ω–æ–≤–æ—Å—Ç–∏ '{instance.title}'")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction.on_commit –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        transaction.on_commit(lambda: process_post_notifications(instance))


@receiver(post_save, sender=Post)
def handle_post_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    """
    if created:
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç: '{instance.title}' (—Ç–∏–ø: {instance.get_post_type_display()})")

        # –î–ª—è –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        if (created and
                instance.post_type == Post.NEWS and
                instance.categories.exists()):
            logger.info(f"üìß –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
            transaction.on_commit(lambda: process_post_notifications(instance))

        # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
        cache_keys = [
            'latest_news',
            'news_list',
            f'post_{instance.id}',
            'categories_list'
        ]
        for key in cache_keys:
            cache.delete(key)

        logger.debug("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞")


def process_post_notifications(post):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    logger.info(f"üìß –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞: '{post.title}' (ID: {post.pk})")

    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        refreshed_post = Post.objects.select_related('author__user').prefetch_related('categories').get(pk=post.pk)
        categories = refreshed_post.categories.all()

        logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.count()}")
        logger.info(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {[cat.name for cat in categories]}")

        if categories.exists():
            total_subscribers = sum(cat.subscribers.count() for cat in categories)
            logger.info(f"üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_subscribers}")

            if total_subscribers > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                refreshed_post.send_notifications_to_subscribers()
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            logger.warning("‚ö†Ô∏è –£ –ø–æ—Å—Ç–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")

    except Post.DoesNotExist:
        logger.error(f"‚ùå –ü–æ—Å—Ç —Å ID {post.pk} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        # send_admin_notification(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò
@receiver(post_save, sender=ActivationToken)
def handle_activation_token_save(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω–∞—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    if instance.activated and not created:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {instance.user.username}")

        try:
            from .services.email_service import EmailService
            EmailService.send_activation_success_email(instance.user)
            logger.info(f"üìß –ü–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {instance.user.email}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É authors –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not instance.user.groups.filter(name='authors').exists():
                authors_group, created = Group.objects.get_or_create(name='authors')
                instance.user.groups.add(authors_group)
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {instance.user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É authors")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –ü–û–î–ü–ò–°–û–ö
@receiver(post_save, sender=Subscription)
def handle_new_subscription(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if created:
        logger.info(f"üì© –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {instance.user.username} -> {instance.category.name}")

        # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        cache.delete(f"user_{instance.user.id}_subscriptions")
        cache.delete(f"category_{instance.category.id}_subscribers_count")


@receiver(post_delete, sender=Subscription)
def handle_subscription_removed(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    logger.info(f"üì™ –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {instance.user.username} -> {instance.category.name}")

    # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    cache.delete(f"user_{instance.user.id}_subscriptions")
    cache.delete(f"category_{instance.category.id}_subscribers_count")


# üîÑ –°–ò–ì–ù–ê–õ–´ –î–õ–Ø –û–ß–ò–°–¢–ö–ò
@receiver(post_save, sender='news.Comment')
def handle_new_comment(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    """
    if created:
        logger.info(f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {instance.user.username} –∫ –ø–æ—Å—Ç—É '{instance.post.title}'")

        # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        cache.delete(f"post_{instance.post.id}_comments")
        cache.delete(f"post_{instance.post.id}_comments_count")


def cleanup_expired_tokens():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    try:
        expired_tokens = ActivationToken.objects.filter(
            activated=False,
            created_at__lt=timezone.now() - timezone.timedelta(days=7)
        )

        count = expired_tokens.count()
        if count > 0:
            expired_tokens.delete()
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")