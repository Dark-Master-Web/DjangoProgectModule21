from django.db.models.signals import m2m_changed, post_save
from django.dispatch import receiver
from django.contrib.auth.models import User, Group
from django.db import transaction
from django.conf import settings
from allauth.account.signals import user_signed_up
from .models import Post


@receiver(user_signed_up)
def add_user_to_common_group(sender, request, user, **kwargs):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É common –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    common_group, created = Group.objects.get_or_create(name='common')
    user.groups.add(common_group)
    user.save()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É common")


@receiver(m2m_changed, sender=Post.categories.through)
def send_notifications_on_categories_added(sender, instance, action, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫ –ø–æ—Å—Ç—É –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ ManyToMany
    """
    print(f"üéØ –°–∏–≥–Ω–∞–ª ManyToMany: action={action}, –ø–æ—Å—Ç='{instance.title}'")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
    if action == "post_add":
        print(f"üöÄ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ø–æ—Å—Ç—É '{instance.title}'")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction.on_commit —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î
        transaction.on_commit(lambda: process_post_notifications(instance))


def process_post_notifications(post):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    print(f"üìß –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞: '{post.title}' (ID: {post.pk})")

    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
        refreshed_post = Post.objects.get(pk=post.pk)
        categories = refreshed_post.categories.all()

        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞: {[cat.name for cat in categories]}")
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.count()}")

        if categories:
            print(f"üë• –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {categories.count()} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            refreshed_post.send_notifications_to_subscribers()
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–µ–π")

    except Post.DoesNotExist:
        print(f"‚ùå –ü–æ—Å—Ç —Å ID {post.pk} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


# üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
@receiver(post_save, sender=Post)
def check_post_categories_after_save(sender, instance, created, **kwargs):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    """
    if created:
        print(f"üîç –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: '{instance.title}', –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {instance.categories.count()}")


@receiver(post_save, sender=User)
def handle_user_registration(sender, instance, created, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if created and not instance.is_staff:  # –ò—Å–∫–ª—é—á–∞–µ–º staff –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {instance.username}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É common
        common_group, created = Group.objects.get_or_create(name='common')
        instance.groups.add(common_group)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from .models import ActivationToken
        from .services.email_service import EmailService

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        activation_token = ActivationToken.create_token(instance)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        activation_url = f"{settings.SITE_URL}/accounts/activate/{activation_token.token}/"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        EmailService.send_welcome_email(instance, activation_url)
        print(f"üìß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {instance.email}")


@receiver(post_save, sender='news.ActivationToken')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
def handle_activation(sender, instance, **kwargs):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    if instance.activated:
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {instance.user.username}")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from .services.email_service import EmailService

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        EmailService.send_activation_success_email(instance.user)
        print(f"üìß –ü–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {instance.user.email}")